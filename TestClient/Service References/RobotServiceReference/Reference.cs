//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;

namespace TestClient.RobotServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InversionFile", Namespace="http://schemas.datacontract.org/2004/07/RobotService")]
    [System.SerializableAttribute()]
    public partial class InversionFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.IO.Stream FileDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.IO.Stream FileData {
            get {
                return this.FileDataField;
            }
            set {
                if ((object.ReferenceEquals(this.FileDataField, value) != true)) {
                    this.FileDataField = value;
                    this.RaisePropertyChanged("FileData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/RobotService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RobotServiceReference.IRobotService")]
    public interface IRobotService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/InitInversion", ReplyAction="http://tempuri.org/IRobotService/InitInversionResponse")]
        Guid InitInversion(Guid ownerId, List<InversionFile> inversionFiles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/StartInversion", ReplyAction="http://tempuri.org/IRobotService/StartInversionResponse")]
        bool StartInversion(System.Guid ownerId, System.Guid inversionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/StopInversion", ReplyAction="http://tempuri.org/IRobotService/StopInversionResponse")]
        bool StopInversion(System.Guid ownerId, System.Guid inversionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/QueryInversion", ReplyAction="http://tempuri.org/IRobotService/QueryInversionResponse")]
        int QueryInversion(System.Guid wellId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/RetrieveInversion", ReplyAction="http://tempuri.org/IRobotService/RetrieveInversionResponse")]
        byte[] RetrieveInversion(System.Guid userId, System.Guid inversionId, string accessCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/GetData", ReplyAction="http://tempuri.org/IRobotService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IRobotService/GetDataUsingDataContractResponse")]
        TestClient.RobotServiceReference.CompositeType GetDataUsingDataContract(TestClient.RobotServiceReference.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRobotServiceChannel : TestClient.RobotServiceReference.IRobotService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RobotServiceClient : System.ServiceModel.ClientBase<TestClient.RobotServiceReference.IRobotService>, TestClient.RobotServiceReference.IRobotService {
        
        public RobotServiceClient() {
        }
        
        public RobotServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RobotServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RobotServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RobotServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Guid InitInversion(Guid ownerId, List<InversionFile> inversionFiles) {
            return base.Channel.InitInversion(ownerId, inversionFiles);
        }
        
        public bool StartInversion(System.Guid ownerId, System.Guid inversionId) {
            return base.Channel.StartInversion(ownerId, inversionId);
        }
        
        public bool StopInversion(System.Guid ownerId, System.Guid inversionId) {
            return base.Channel.StopInversion(ownerId, inversionId);
        }
        
        public int QueryInversion(System.Guid wellId) {
            return base.Channel.QueryInversion(wellId);
        }
        
        public byte[] RetrieveInversion(System.Guid userId, System.Guid inversionId, string accessCode) {
            return base.Channel.RetrieveInversion(userId, inversionId, accessCode);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public TestClient.RobotServiceReference.CompositeType GetDataUsingDataContract(TestClient.RobotServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
    }
}
